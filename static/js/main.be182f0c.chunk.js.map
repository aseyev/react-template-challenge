{"version":3,"sources":["components/page.module.css","img/mockup-card.jpg","img/circlesСircle.svg","components/common/paginator.jsx","components/header.jsx","components/card.jsx","components/cardsList.jsx","components/common/PreloaderCircle.js","components/PageWrapper.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Paginator","lastPage","currentPage","setCurrentPage","useState","arrNumbers","setArrNumbers","isPrevActive","setIsPrevActive","isNextActive","setIsNextActive","buttonsQ","setButtonsQ","useEffect","arr","i","push","Math","floor","console","log","arrButtons","map","button","key","currentStyle","s","button_current","className","onClick","paginator","button_blocked","Header","props","header","iMinOnPage","iMaxOnPage","cardsAllQuantity","Picture","img_block","img","src","url","alt","TitleFormatted","titleLoaded","titleFormat","length","slice","maxL","title","TimePassed","counter","data","now","Date","fromJson","diffDays","date_from","StarRating","stars","rating","red","gray","Card","card","id","onMouseOver","image_url","created_at","vote","price","toFixed","CardsList","cardsListing","cardsForPage","p","cards_list","PreloaderCircle","preloader_position","Circle","PageWrapper","newCurrentPage","setState","currentPageNumber","state","error","isLoaded","cards","cardsOnPage","fetch","then","res","json","result","this","lastPageNumber","ceil","page_wrapper","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be182f0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page_wrapper\":\"page_page_wrapper__6PxW5\",\"header\":\"page_header__2mXA8\",\"cards_list\":\"page_cards_list__1ZsNW\",\"card_test\":\"page_card_test__19bie\",\"img_test\":\"page_img_test__3FqlG\",\"card\":\"page_card__21gAS\",\"img_block\":\"page_img_block__3wID-\",\"paginator\":\"page_paginator__2ZI1N\",\"title\":\"page_title__20Hm6\",\"date_from\":\"page_date_from__26vIV\",\"rating\":\"page_rating__35ZKN\",\"price\":\"page_price__363Ij\",\"red\":\"page_red__1WOW6\",\"gray\":\"page_gray__1-oGi\",\"button\":\"page_button__1LqjM\",\"button_current\":\"page_button_current__sAhHE\",\"button_blocked\":\"page_button_blocked__2xBzC\",\"preloader_position\":\"page_preloader_position__ukNoa\"};","module.exports = __webpack_public_path__ + \"static/media/mockup-card.9c3e8757.jpg\";","module.exports = __webpack_public_path__ + \"static/media/circlesСircle.78eb393d.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport s from \"./../page.module.css\";\r\n\r\nlet Paginator = ({ lastPage = 2, currentPage = 1, setCurrentPage }) => {\r\n    const [arrNumbers, setArrNumbers] = useState([]);\r\n\r\n    const [isPrevActive, setIsPrevActive] = useState(false)\r\n    const [isNextActive, setIsNextActive] = useState(false)\r\n\r\n    //THIS STATE for setting pages quantity in pagination\r\n    const [buttonsQ, setButtonsQ] = useState(5);\r\n\r\n    useEffect(() => {\r\n        if (buttonsQ < 3 || buttonsQ > 9 || buttonsQ%2===0) {setButtonsQ(5)}\r\n        let arr = [];\r\n        if (buttonsQ >= lastPage) {\r\n            for (let i = 1; i <= lastPage; i++) {arr.push(i)}\r\n        }\r\n        else if (currentPage <= Math.floor(buttonsQ/2)) {\r\n            for (let i = 1; i <= buttonsQ; i++) {arr.push(i)}\r\n        }\r\n        else if (currentPage > lastPage - Math.floor(buttonsQ/2) ) {\r\n            for (let i = lastPage-buttonsQ+1; i <= lastPage; i++) {arr.push(i)}\r\n        }\r\n        else {\r\n            for (let i = currentPage-Math.floor(buttonsQ/2); i <= currentPage+Math.floor(buttonsQ/2); i++) {arr.push(i)}\r\n        }\r\n        setArrNumbers(arr);\r\n        currentPage <= 1 ? setIsPrevActive(false) : setIsPrevActive(true);\r\n        currentPage >= lastPage ? setIsNextActive(false) : setIsNextActive(true);\r\n    }, [currentPage, lastPage, buttonsQ ]);\r\n\r\n    //CONTROL\r\n    console.log('arrNumbers ', arrNumbers); \r\n    const arrButtons = arrNumbers.map((button, key) => {\r\n        let currentStyle = null\r\n        button === currentPage ? currentStyle = s.button_current : currentStyle = s.button\r\n        return ( \r\n            <div className={currentStyle} key={key} onClick={()=>setCurrentPage(button)} >\r\n                {button}\r\n            </div>\r\n        ) \r\n\r\n    } )\r\n    console.log('arrButtons ', arrButtons); \r\n    return (\r\n        <div className={s.paginator}>\r\n            <div className={isPrevActive ? s.button : s.button_blocked} \r\n                onClick={isPrevActive && (()=>setCurrentPage(currentPage-1))}\r\n            >\r\n                {`<`}\r\n            </div>\r\n            {arrButtons}\r\n            <div className={isNextActive ? s.button : s.button_blocked}\r\n                onClick={isNextActive && (()=>setCurrentPage(currentPage+1))}\r\n            >\r\n                {`>`}\r\n            </div>\r\n        </div>\r\n    );\r\n}; \r\n\r\nexport default Paginator;\r\n","import React from 'react';\r\nimport s from './page.module.css';\r\n\r\nlet Header = (props) => {\r\n    return <div className={s.header}>\r\n        <p>{`${props.iMinOnPage + 1} - ${props.iMaxOnPage + 1} from ${props.cardsAllQuantity}`}</p>\r\n    </div>\r\n    \r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport s from './page.module.css';\r\n\r\n//Single Card \r\nconst Card = (props) => {\r\n\r\n    let data = props.props;\r\n\r\n    return <div className={s.card} key={props.id} onMouseOver={props.onMouseOver}>\r\n\r\n        <Picture url={data.image_url} />\r\n\r\n        <TitleFormatted props={data.title} />\r\n\r\n        <TimePassed props={data.created_at} />\r\n\r\n        <StarRating props={data.vote} />\r\n\r\n        <div className={s.price}>\r\n            {`฿${data.price.toFixed(2)}`}\r\n        </div>\r\n\r\n    </div>\r\n}\r\nconst Picture = (props) => {\r\n\r\n    return <div className={s.img_block}>\r\n        <img className={s.img} src={props.url} alt=\"loading\" />\r\n        {/* <img src={user.photos.small != null ? user.photos.small : userTemplatePic} alt={user.name} /> */}\r\n    </div>\r\n}\r\nconst TitleFormatted = (props) => {\r\n    let titleLoaded = props.props;\r\n    let titleFormat = titleLoaded;\r\n    let maxL = 88;\r\n    if (titleLoaded.length > maxL) {titleFormat = titleLoaded.slice(0, maxL-3)+'...'}\r\n    return <div className={s.title}>\r\n        {titleFormat}\r\n    </div>\r\n}\r\n\r\n// Counts a Day gap between loading and now, and chooses a phrase\r\nconst TimePassed = (props) => {\r\n    let data = props.props;\r\n    let now = new Date();\r\n    let fromJson = new Date(data);\r\n    const diffDays = Math.floor((now - fromJson) / 86400000);\r\n\r\n    const periodSwitch = (counter) => {\r\n        if (counter / 365 > 1) { return \"More than 1 year ago\" }\r\n        else {\r\n            if (counter / 30 > 1) { return \"More than 1 month ago\" }\r\n            else {\r\n                if (counter / 7 > 1) { return \"More than 1 week ago\" }\r\n                else {\r\n                    if (counter === 0) { return \"Posted today\" }\r\n                    else {return \"Out of Date\" }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return <div className={s.date_from}>\r\n            {periodSwitch(diffDays)}\r\n        </div>\r\n    }\r\n    \r\n// Forms JSX from an array of correctly colored stars\r\n    const StarRating = (props) => {\r\n        const stars = [];\r\n        let rating = props.props\r\n        for (let i = 0; i < 5; i++) {\r\n            const starColor = () => i < rating ? s.red : s.gray;\r\n            stars.push(<div className={starColor()}  key={i} >&#9733;</div>);\r\n        }\r\n        return <div className={s.rating}>\r\n            {stars}\r\n        </div>\r\n    }\r\n\r\n    export default Card;\r\n","import React from 'react';\r\nimport s from './page.module.css';\r\nimport Card from './card';\r\n// import Card from './card backup';\r\nimport CardTest from './cardTest';\r\n\r\n// maps ana array from Cards\r\nlet CardsList = (props) => {\r\n    let data=props.cardsForPage;\r\n    let  cardsListing = data.map((p, key) => <Card key={p.id} props={p} />);\r\n\r\n    return <div className={s.cards_list}>\r\n        {/* <CardTest/> */}\r\n        {cardsListing}\r\n    </div>\r\n    \r\n}\r\nexport default CardsList;\r\n","import React from 'react';\r\nimport Circle from \"../../img/circlesСircle.svg\";\r\nimport s from './../page.module.css';\r\n\r\nlet PreloaderCircle = () => {\r\n    return <div className={s.preloader_position}>\r\n        <img src={Circle} alt={'loading...'}/>\r\n    </div>\r\n    \r\n}\r\n\r\nexport default PreloaderCircle;","import React from 'react';\r\nimport Paginator from './common/paginator';\r\nimport Header from './header';\r\nimport CardsList from './cardsList';\r\nimport s from './page.module.css';\r\nimport PreloaderCircle from \"./common/PreloaderCircle\";\r\n\r\nexport class PageWrapper extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            cards: [],\r\n            currentPageNumber: 1,\r\n            cardsOnPage: 12,\r\n            cardsAllQuantity: 0,\r\n        };\r\n    }\r\n    setCurrentPage = (newCurrentPage) => {\r\n        this.setState({\r\n            currentPageNumber: newCurrentPage\r\n        })\r\n    }\r\n//Async loading JSON from server to local state \r\n    componentDidMount() {\r\n        fetch(\"./list_ext.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        cards: result,\r\n                        cardsAllQuantity: result.length\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n//Show preloader svg on screen until data not downloaded\r\n//Prevents unneccessary rerenders of children components \r\n    render() {\r\n        if ( !this.state.isLoaded ) {\r\n            return <PreloaderCircle />\r\n        }\r\n        let iMinOnPage = (this.state.currentPageNumber - 1) * this.state.cardsOnPage;\r\n        let iMaxOnPage = (this.state.currentPageNumber * this.state.cardsOnPage) - 1;\r\n        if (iMaxOnPage>this.state.cardsAllQuantity) iMaxOnPage = this.state.cardsAllQuantity-1;\r\n\r\n        let lastPageNumber = Math.ceil(this.state.cardsAllQuantity / this.state.cardsOnPage);\r\n        let cardsForPage = this.state.cards.slice(iMinOnPage,iMaxOnPage+1)\r\n\r\n        // console.log(this.state);\r\n        // console.log(cardsForPage);\r\n        console.log('first element\\'s id on page ',iMinOnPage,', last element\\'s id on page ',iMaxOnPage);\r\n        console.log('pages quantity ',lastPageNumber, ', current page ', this.state.currentPageNumber);\r\n\r\n        return <div className={s.page_wrapper}>\r\n            <Header iMinOnPage={iMinOnPage} iMaxOnPage={iMaxOnPage} cardsAllQuantity={this.state.cardsAllQuantity}/>\r\n            <CardsList cardsForPage={cardsForPage}/>\r\n            <Paginator lastPage={lastPageNumber} \r\n                currentPage={this.state.currentPageNumber} \r\n                setCurrentPage={this.setCurrentPage}/>\r\n        </div>\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { PageWrapper } from './components/PageWrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageWrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}