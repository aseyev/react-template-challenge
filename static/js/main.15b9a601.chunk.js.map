{"version":3,"sources":["components/page.module.css","img/circlesСircle.svg","img/mockup-card.jpg","components/common/paginator.jsx","components/header.jsx","components/common/PreloaderCircle.js","components/card.jsx","components/cardsList.jsx","components/PageWrapper.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Paginator","pages","currentPage","className","s","paginator","button_current","button","button_next","Header","props","header","iMinOnPage","iMaxOnPage","cardsAllQuantity","PreloaderCircle","preloader_position","src","Circle","alt","Picture","useState","loading","setLoading","useEffect","fetch","url","headers","mode","redirect","then","resp","ok","catch","err","console","log","img_block","img","TitleFormatted","titleLoaded","titleFormat","length","slice","maxL","title","TimePassed","counter","data","now","Date","fromJson","diffDays","Math","floor","date_from","StarRating","stars","rating","i","push","key","red","gray","Card","card","image_url","created_at","vote","price","toFixed","CardsList","cardsListing","cardsForPage","map","p","cards_list","PageWrapper","state","error","isLoaded","cards","currentPageNumber","cardsOnPage","res","json","result","setState","this","lastPageNumber","ceil","page_wrapper","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15b9a601.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page_wrapper\":\"page_page_wrapper__6PxW5\",\"header\":\"page_header__2mXA8\",\"cards_list\":\"page_cards_list__1ZsNW\",\"card_test\":\"page_card_test__19bie\",\"img_test\":\"page_img_test__3FqlG\",\"card\":\"page_card__21gAS\",\"img_block\":\"page_img_block__3wID-\",\"paginator\":\"page_paginator__2ZI1N\",\"title\":\"page_title__20Hm6\",\"date_from\":\"page_date_from__26vIV\",\"rating\":\"page_rating__35ZKN\",\"price\":\"page_price__363Ij\",\"red\":\"page_red__1WOW6\",\"gray\":\"page_gray__1-oGi\",\"button\":\"page_button__1LqjM\",\"button_current\":\"page_button_current__sAhHE\",\"button_next\":\"page_button_next__3a4kL\",\"preloader_position\":\"page_preloader_position__ukNoa\"};","module.exports = __webpack_public_path__ + \"static/media/circlesСircle.78eb393d.svg\";","module.exports = __webpack_public_path__ + \"static/media/mockup-card.9c3e8757.jpg\";","import React from 'react';\r\nimport s from './../page.module.css';\r\n\r\nlet Paginator = ({pages=2, currentPage=1}) => {\r\n    return <div className={s.paginator}>\r\n        <div className={s.button_current}>1</div>\r\n        <div className={s.button}>2</div>\r\n        <div className={s.button_next}>></div>\r\n    </div>\r\n    \r\n}\r\n\r\nexport default Paginator;\r\n","import React from 'react';\r\nimport s from './page.module.css';\r\n\r\nlet Header = (props) => {\r\n    return <div className={s.header}>\r\n        <p>{`${props.iMinOnPage + 1} - ${props.iMaxOnPage + 1} from ${props.cardsAllQuantity}`}</p>\r\n    </div>\r\n    \r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Circle from \"../../img/circlesСircle.svg\";\r\nimport s from './../page.module.css';\r\n\r\nlet PreloaderCircle = () => {\r\n    return <div className={s.preloader_position}>\r\n        <img src={Circle} alt={'loading...'}/>\r\n    </div>\r\n    \r\n}\r\n\r\nexport default PreloaderCircle;","import React, { useState, useEffect } from 'react';\r\nimport s from './page.module.css';\r\nimport PreloaderCircle from './common/PreloaderCircle';\r\n\r\n//Single Card \r\nlet Card = (props) => {\r\n\r\n    let data = props.props;\r\n\r\n    return <div className={s.card}>\r\n\r\n        <Picture url={data.image_url} />\r\n\r\n        <TitleFormatted props={data.title} />\r\n\r\n        <TimePassed props={data.created_at} />\r\n\r\n        <StarRating props={data.vote} />\r\n\r\n        <div className={s.price}>\r\n            {`฿${data.price.toFixed(2)}`}\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nconst Picture = (props) => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        fetch(props.url, {\r\n            headers: {\r\n                'Content-Type': 'image/png',\r\n                'Access-Control-Allow-Origin': '*'\r\n            },\r\n            mode: \"cors\",\r\n            redirect: \"follow\"\r\n        })\r\n            .then(resp => {\r\n                debugger\r\n                if (resp.ok) {\r\n                    setLoading(false);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [props.url])\r\n\r\n    return (\r\n        <>\r\n            <div className={s.img_block}>\r\n                {\r\n                    loading &&\r\n                    <PreloaderCircle />\r\n                }\r\n                {\r\n                    !loading &&\r\n                    <img className={s.img} src={props.url} alt=\"lorempixel\" />\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nlet TitleFormatted = (props) => {\r\n    let titleLoaded = props.props;\r\n    let titleFormat = titleLoaded;\r\n    let maxL = 88;\r\n    if (titleLoaded.length > maxL) { titleFormat = titleLoaded.slice(0, maxL - 3) + '...' }\r\n    return <div className={s.title}>\r\n        {titleFormat}\r\n    </div>\r\n}\r\n\r\n// Counts a Day gap between loading and now, and chooses a phrase\r\nlet TimePassed = (props) => {\r\n    let data = props.props;\r\n    let now = new Date();\r\n    let fromJson = new Date(data);\r\n    const diffDays = Math.floor((now - fromJson) / 86400000);\r\n\r\n    let periodSwitch = (counter) => {\r\n        if (counter / 365 > 1) { return \"More than 1 year ago\" }\r\n        else {\r\n            if (counter / 30 > 1) { return \"More than 1 month ago\" }\r\n            else {\r\n                if (counter / 7 > 1) { return \"More than 1 week ago\" }\r\n                else {\r\n                    if (counter === 0) { return \"Posted today\" }\r\n                    else { return \"Out of Date\" }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return <div className={s.date_from}>\r\n        {periodSwitch(diffDays)}\r\n    </div>\r\n}\r\n\r\n// Forms JSX from an array of correctly colored stars\r\nconst StarRating = (props) => {\r\n    const stars = [];\r\n    let rating = props.props\r\n    for (let i = 0; i < 5; i++) {\r\n        let starColor = () => i < rating ? s.red : s.gray;\r\n        stars.push(<div key={i} className={starColor()}>&#9733;</div>);\r\n    }\r\n    return <div className={s.rating}>\r\n        {stars}\r\n    </div>\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport s from './page.module.css';\r\nimport Card from './card';\r\n// import Card from './card backup';\r\nimport CardTest from './cardTest';\r\n\r\n// maps ana array from Cards\r\nlet CardsList = (props) => {\r\n    let data=props.cardsForPage;\r\n    let  cardsListing = data.map((p, key) => <Card key={key} props={p} />);\r\n\r\n    return <div className={s.cards_list}>\r\n        {/* <CardTest/> */}\r\n        {cardsListing}\r\n    </div>\r\n    \r\n}\r\nexport default CardsList;\r\n","import React from 'react';\r\nimport Paginator from './common/paginator';\r\nimport Header from './header';\r\nimport CardsList from './cardsList';\r\nimport s from './page.module.css';\r\nimport PreloaderCircle from \"./common/PreloaderCircle\";\r\n\r\nexport class PageWrapper extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            cards: [],\r\n            currentPageNumber: 1,\r\n            cardsOnPage: 4,\r\n            cardsAllQuantity: 0,\r\n        };\r\n    }\r\n//Async loading JSON from server to local state \r\n    componentDidMount() {\r\n        fetch(\"./list_ext.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        cards: result,\r\n                        cardsAllQuantity: result.length\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n//Show preloader svg on screen until data not downloaded\r\n//Prevents unneccessary rerenders of children components \r\n    render() {\r\n        if ( !this.state.isLoaded ) {\r\n            return <PreloaderCircle />\r\n        }\r\n        let iMinOnPage = (this.state.currentPageNumber - 1) * this.state.cardsOnPage;\r\n        let iMaxOnPage = (this.state.currentPageNumber * this.state.cardsOnPage) - 1;\r\n        if (iMaxOnPage>this.state.cardsAllQuantity) iMaxOnPage = this.state.cardsAllQuantity-1;\r\n\r\n        let lastPageNumber = Math.ceil(this.state.cardsAllQuantity / this.state.cardsOnPage);\r\n        let cardsForPage = this.state.cards.slice(iMinOnPage,iMaxOnPage+1)\r\n\r\n        console.log(this.state);\r\n        console.log(cardsForPage);\r\n        console.log(iMinOnPage,' ',iMaxOnPage,' ',lastPageNumber );\r\n\r\n        return <div className={s.page_wrapper}>\r\n            <Header iMinOnPage={iMinOnPage} iMaxOnPage={iMaxOnPage} cardsAllQuantity={this.state.cardsAllQuantity}/>\r\n            <CardsList cardsForPage={cardsForPage}/>\r\n            <Paginator />\r\n        </div>\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { PageWrapper } from './components/PageWrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageWrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}